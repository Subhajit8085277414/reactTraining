{"ast":null,"code":"var _jsxFileName = \"/home/subhajit/reacttraining/react-raining-sample/src/components/Username.js\";\nimport React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { Input, InputGroup } from 'reactstrap';\nlet value = '';\n\nconst Username = () => {\n  let schema = yup.object().shape({\n    usernameEntered: yup.string().required()\n  });\n  const [username, setUsername] = useState(value);\n  const [errors, showError] = useState(false);\n\n  const checkValid = input => {\n    schema.isValid({\n      usernameEntered: username\n    }).then(function (valid) {\n      showError(!valid);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Username\",\n    onChange: event => {\n      setUsername(event.target.value);\n      checkValid(username);\n    },\n    value: username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: \"FirstName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, msg => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 50\n    }\n  }, msg))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Username; //onChange={ (event) => { updateInputValue(event.target.value)}}","map":{"version":3,"sources":["/home/subhajit/reacttraining/react-raining-sample/src/components/Username.js"],"names":["React","useState","yup","Input","InputGroup","value","Username","schema","object","shape","usernameEntered","string","required","username","setUsername","errors","showError","checkValid","input","isValid","then","valid","event","target","msg"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,YAAlC;AAEA,IAAIC,KAAK,GAAG,EAAZ;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,MAAIC,MAAM,GAAGL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,IAAAA,eAAe,EAAER,GAAG,CAACS,MAAJ,GAAaC,QAAb;AADa,GAAnB,CAAb;AAIA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACI,KAAD,CAAxC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;;AACA,QAAMgB,UAAU,GAAIC,KAAD,IAAW;AAC5BX,IAAAA,MAAM,CAACY,OAAP,CAAe;AACbT,MAAAA,eAAe,EAAEG;AADJ,KAAf,EAEGO,IAFH,CAEQ,UAAUC,KAAV,EAAiB;AACvBL,MAAAA,SAAS,CAAC,CAACK,KAAF,CAAT;AACD,KAJD;AAKD,GAND;;AAUA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,UAA/B;AAA0C,IAAA,QAAQ,EAAGC,KAAD,IAAW;AAC7DR,MAAAA,WAAW,CAACQ,KAAK,CAACC,MAAN,CAAalB,KAAd,CAAX;AACAY,MAAAA,UAAU,CAACJ,QAAD,CAAV;AACD,KAHD;AAGG,IAAA,KAAK,EAAEA,QAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCW,GAAG,iBAAI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCA,GAAtC,CAAvC,CALF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,CADF;AAgBD,CAjCD;;AAkCA,eAAelB,QAAf,C,CACA","sourcesContent":["import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { Input, InputGroup } from 'reactstrap';\n\nlet value = '';\nconst Username = () => {\n  let schema = yup.object().shape({\n    usernameEntered: yup.string().required()\n  })\n\n  const [username, setUsername] = useState(value);\n  const [errors, showError] = useState(false);\n  const checkValid = (input) => {\n    schema.isValid({\n      usernameEntered: username\n    }).then(function (valid) {\n      showError(!valid);\n    });\n  }\n\n\n\n  return (\n    <div>\n      <InputGroup>\n        <h6>\n          <input type=\"text\" placeholder=\"Username\" onChange={(event) => {\n            setUsername(event.target.value)\n            checkValid(username)\n          }} value={username} />\n          <ErrorMessage name=\"FirstName\">{msg => <div className=\"error error-message\">{msg}</div>}</ErrorMessage>\n        </h6>\n        <br />\n\n      </InputGroup>\n    </div>\n\n  )\n}\nexport default Username;\n//onChange={ (event) => { updateInputValue(event.target.value)}}"]},"metadata":{},"sourceType":"module"}