{"ast":null,"code":"var _jsxFileName = \"/home/subhajit/reacttraining/react-raining-sample/src/components/Username.js\";\n// import React, { useState } from 'react';\n// import * as yup from 'yup';\n// import {  InputGroup } from 'reactstrap';\n// let schema = yup.object().shape({\n//   usernameEntered: yup.string().required()\n// })\n// const Username = (props) => {\n//   const { placeholder, value } = props;\n//   const [username, setUsername] = useState(value);\n//   const [errortext, showError] = useState(false);\n//   const checkValid = (input) => {\n//     schema.isValid({\n//       usernameEntered: input\n//      }).then(function (valid) {\n//       console.log(valid);\n//       showError(!valid);\n//     });\n//     schema.validate({usernameEntered: input}).catch(function(err){\n//      console.log( err.name);\n//       console.log(err.errors);\n//     })\n//   }\n//   return (\n//     <div>\n//       <InputGroup>\n//         <h6>\n//           <input type=\"text\" placeholder={placeholder} onChange={(event) => {\n//             setUsername(event.target.value)\n//             checkValid(username)\n//           }} value={username}  />\n//         </h6>\n//         <br />\n//         <span className={errortext ? \"error\" : \"d-none\"}\n//         >invalid email</span>\n//       </InputGroup>\n//     </div>\n//   )\n// };\n// Username.defaultProps = {\n//   errorMesage: null,\n//   placeholder: 'Please enter your email',\n//   value: ''\n// };\n// export default Username;\nimport React, { useState } from 'react';\nimport { Input, InputGroup } from 'reactstrap';\nimport { string, object } from 'yup';\nlet inputEmail;\nconst schema1 = object().shape({\n  password: string().email().required()\n});\nexport const getInputEmail = () => {\n  return inputEmail;\n};\n\nconst setInputEmail = pass => {\n  inputEmail = pass;\n};\n\nconst JoshTextFieldComponent = props => {\n  const {\n    placeholder,\n    value\n  } = props;\n  const [inputStateEmail, updateInputEmail] = useState(value);\n  const [showEmailError, updateShowEmailError] = useState(false);\n\n  const shouldEmailMarkError = field => {\n    schema1.isValid({\n      password: inputStateEmail\n    }).then(function (valid) {\n      updateShowEmailError(!valid);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"username\",\n    placeholder: placeholder,\n    onChange: event => {\n      updateInputEmail(event.target.value);\n      shouldEmailMarkError(inputStateEmail);\n      setInputEmail(inputEmail);\n    },\n    value: inputStateEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: showEmailError ? \"error\" : \"d-none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"invalid email\"));\n}; //JoshTextFieldComponent.propTypes = {};\n\n\nJoshTextFieldComponent.defaultProps = {\n  errorMesage: null,\n  placeholder: 'Please enter your email',\n  value: ''\n};\nexport default JoshTextFieldComponent;","map":{"version":3,"sources":["/home/subhajit/reacttraining/react-raining-sample/src/components/Username.js"],"names":["React","useState","Input","InputGroup","string","object","inputEmail","schema1","shape","password","email","required","getInputEmail","setInputEmail","pass","JoshTextFieldComponent","props","placeholder","value","inputStateEmail","updateInputEmail","showEmailError","updateShowEmailError","shouldEmailMarkError","field","isValid","then","valid","event","target","defaultProps","errorMesage"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,KAAR,EAAeC,UAAf,QAAgC,YAAhC;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,KAA/B;AACA,IAAIC,UAAJ;AACA,MAAMC,OAAO,GAAGF,MAAM,GAAGG,KAAT,CAAe;AAC7BC,EAAAA,QAAQ,EAAEL,MAAM,GAAGM,KAAT,GAAiBC,QAAjB;AADmB,CAAf,CAAhB;AAGA,OAAO,MAAMC,aAAa,GAAE,MAAI;AAC9B,SAAON,UAAP;AACD,CAFM;;AAGP,MAAMO,aAAa,GAAGC,IAAD,IAAQ;AAC3BR,EAAAA,UAAU,GAAGQ,IAAb;AACD,CAFD;;AAIA,MAAMC,sBAAsB,GAAIC,KAAD,IAAU;AACvC,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,MAAuBF,KAA7B;AAEA,QAAM,CAACG,eAAD,EAAkBC,gBAAlB,IAAsCnB,QAAQ,CAACiB,KAAD,CAApD;AACA,QAAM,CAACG,cAAD,EAAiBC,oBAAjB,IAAyCrB,QAAQ,CAAC,KAAD,CAAvD;;AAEA,QAAMsB,oBAAoB,GAAIC,KAAD,IAAW;AACtCjB,IAAAA,OAAO,CAACkB,OAAR,CAAgB;AACdhB,MAAAA,QAAQ,EAACU;AADK,KAAhB,EAEGO,IAFH,CAEQ,UAASC,KAAT,EAAgB;AACtBL,MAAAA,oBAAoB,CAAC,CAACK,KAAF,CAApB;AACD,KAJD;AAKD,GAND;;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,WAAW,EAAEV,WAHf;AAIE,IAAA,QAAQ,EAAGW,KAAD,IAAU;AAACR,MAAAA,gBAAgB,CAACQ,KAAK,CAACC,MAAN,CAAaX,KAAd,CAAhB;AACnBK,MAAAA,oBAAoB,CAACJ,eAAD,CAApB;AACAN,MAAAA,aAAa,CAACP,UAAD,CAAb;AACD,KAPH;AAQE,IAAA,KAAK,EAAEa,eART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAcE;AAAM,IAAA,SAAS,EAAEE,cAAc,GAAG,OAAH,GAAa,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAdF,CADF;AAmBD,CAjCD,C,CAkCA;;;AAEAN,sBAAsB,CAACe,YAAvB,GAAsC;AACpCC,EAAAA,WAAW,EAAE,IADuB;AAEpCd,EAAAA,WAAW,EAAE,yBAFuB;AAGpCC,EAAAA,KAAK,EAAE;AAH6B,CAAtC;AAOA,eAAeH,sBAAf","sourcesContent":["// import React, { useState } from 'react';\n// import * as yup from 'yup';\n// import {  InputGroup } from 'reactstrap';\n\n// let schema = yup.object().shape({\n//   usernameEntered: yup.string().required()\n// })\n\n// const Username = (props) => {\n//   const { placeholder, value } = props;\n\n   \n//   const [username, setUsername] = useState(value);\n//   const [errortext, showError] = useState(false);\n//   const checkValid = (input) => {\n//     schema.isValid({\n//       usernameEntered: input\n//      }).then(function (valid) {\n//       console.log(valid);\n//       showError(!valid);\n\n//     });\n\n//     schema.validate({usernameEntered: input}).catch(function(err){\n     \n//      console.log( err.name);\n  \n//       console.log(err.errors);\n//     })\n//   }\n\n\n//   return (\n//     <div>\n//       <InputGroup>\n//         <h6>\n//           <input type=\"text\" placeholder={placeholder} onChange={(event) => {\n//             setUsername(event.target.value)\n//             checkValid(username)\n//           }} value={username}  />\n         \n//         </h6>\n\n//         <br />\n//         <span className={errortext ? \"error\" : \"d-none\"}\n//         >invalid email</span>\n\n//       </InputGroup>\n//     </div>\n\n//   )\n// };\n// Username.defaultProps = {\n//   errorMesage: null,\n//   placeholder: 'Please enter your email',\n//   value: ''\n// };\n// export default Username;\nimport React ,{useState} from 'react';\nimport {Input, InputGroup} from 'reactstrap';\nimport { string, object } from 'yup'; \nlet inputEmail\nconst schema1 = object().shape({\n  password: string().email().required()\n})\nexport const getInputEmail =()=>{\n  return inputEmail;\n}\nconst setInputEmail =(pass)=>{\n  inputEmail = pass\n}\n\nconst JoshTextFieldComponent = (props) =>{\n  const {placeholder, value} = props;\n\n  const [inputStateEmail, updateInputEmail] = useState(value);\n  const [showEmailError, updateShowEmailError] = useState(false);\n\n  const shouldEmailMarkError = (field) => {\n    schema1.isValid({\n      password:inputStateEmail\n    }).then(function(valid) {\n      updateShowEmailError(!valid)\n    })\n  };\n\n  return (\n    <div>\n      <InputGroup>\n        <Input\n          type='text'\n          name='username'\n          placeholder={placeholder}\n          onChange={(event) =>{updateInputEmail(event.target.value)\n            shouldEmailMarkError(inputStateEmail)\n            setInputEmail(inputEmail)\n          }}\n          value={inputStateEmail}\n        />\n      </InputGroup>\n      <br/>\n      <span className={showEmailError ? \"error\" : \"d-none\"}\n        >invalid email</span>\n    </div>\n  );\n};\n//JoshTextFieldComponent.propTypes = {};\n\nJoshTextFieldComponent.defaultProps = {\n  errorMesage: null,\n  placeholder: 'Please enter your email',\n  value: ''\n};\n\n\nexport default JoshTextFieldComponent;"]},"metadata":{},"sourceType":"module"}