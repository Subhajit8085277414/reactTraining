{"ast":null,"code":"var _jsxFileName = \"/home/subhajit/reacttraining/react-raining-sample/src/components/Username.js\";\nimport React, { useState } from 'react';\nimport * as yup from 'yup';\nimport { Input, InputGroup } from 'reactstrap'; //let yup = require ('yup');\n\nlet value = '';\n\nconst Username = () => {\n  let schema = yup.object().shape({\n    usernameEntered: yup.string().required()\n  });\n  const [username, setUsername] = useState(value);\n  const [errors, showError] = useState(false);\n\n  const checkValid = input => {\n    schema.isValid({\n      usernameEntered: username\n    }).then(function (valid) {\n      showError(!valid);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Username\",\n    onChange: event => {\n      setUsername(event.target.value);\n      checkValid(username);\n    },\n    value: username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default Username; //onChange={ (event) => { updateInputValue(event.target.value)}}","map":{"version":3,"sources":["/home/subhajit/reacttraining/react-raining-sample/src/components/Username.js"],"names":["React","useState","yup","Input","InputGroup","value","Username","schema","object","shape","usernameEntered","string","required","username","setUsername","errors","showError","checkValid","input","isValid","then","valid","event","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAAQC,KAAR,EAAcC,UAAd,QAA+B,YAA/B,C,CACA;;AACA,IAAKC,KAAK,GAAE,EAAZ;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,MAAIC,MAAM,GAAEL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AAC7BC,IAAAA,eAAe,EAAER,GAAG,CAACS,MAAJ,GAAaC,QAAb;AADY,GAAnB,CAAZ;AAIA,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4Bb,QAAQ,CAACI,KAAD,CAA1C;AACA,QAAM,CAACU,MAAD,EAAQC,SAAR,IAAmBf,QAAQ,CAAC,KAAD,CAAjC;;AACC,QAAMgB,UAAU,GAAEC,KAAD,IAAS;AACxBX,IAAAA,MAAM,CAACY,OAAP,CAAe;AACfT,MAAAA,eAAe,EAAEG;AADF,KAAf,EAECO,IAFD,CAEM,UAASC,KAAT,EAAe;AACrBL,MAAAA,SAAS,CAAC,CAACK,KAAF,CAAT;AACD,KAJC;AAKF,GANA;;AAUD,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,UAA/B;AAA2C,IAAA,QAAQ,EAAIC,KAAD,IAAW;AAAER,MAAAA,WAAW,CAACQ,KAAK,CAACC,MAAN,CAAalB,KAAd,CAAX;AACjEY,MAAAA,UAAU,CAACJ,QAAD,CAAV;AAAsB,KADxB;AAC0B,IAAA,KAAK,EAAEA,QADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADG,eAKH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALG,CADH,CADF;AAaD,CA9BD;;AA+BA,eAAeP,QAAf,C,CACA","sourcesContent":["import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport {Input,InputGroup} from 'reactstrap';\n//let yup = require ('yup');\nlet  value= '';\nconst Username = () => {\n  let schema =yup.object().shape({\n    usernameEntered :yup.string().required()\n  })\n  \n  const [ username, setUsername ] = useState(value);\n  const [errors,showError]=useState(false);\n   const checkValid=(input)=>{\n     schema.isValid({\n     usernameEntered :username\n   }).then(function(valid){\n     showError(!valid);\n   });\n  }\n\n\n\n  return (\n    <div>\n       <InputGroup>\n    <h6>\n    <input type=\"text\" placeholder=\"Username\"  onChange={ (event) => { setUsername(event.target.value) \n      checkValid(username) }} value={username} />\n    </h6>\n    <br/>\n    \n      </InputGroup>\n    </div>\n    \n  )\n}\nexport default Username;\n//onChange={ (event) => { updateInputValue(event.target.value)}}"]},"metadata":{},"sourceType":"module"}